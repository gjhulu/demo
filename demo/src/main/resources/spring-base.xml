<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/jee
	http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://activemq.apache.org/schema/core
	http://activemq.apache.org/schema/core/activemq-core.xsd"
	default-lazy-init="true">
	
	<!-- 引入参数配置文件 -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:/property/jdbc.properties</value>
				<!-- <value>classpath:/property/redis.properties</value> -->
			</list>
		</property>
	</bean>
	
	<!-- 该标签隐式的向Spring容器注册了：AutowiredAnnotationBeanPostProcessor、CommondAnnotationBeanPostProcessor、PersistenceAnnotationBeanPostProcessor、RequiredAnnotationBeanPostProcessor -->
	<context:annotation-config ></context:annotation-config>
	
	<!-- 组件扫描,自动扫描(自动注入) 自动扫描com.test.demo包 ,将带有注解的类 纳入spring容器管理 -->
	<context:component-scan base-package="com.test.demo">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
		<!-- <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" /> -->
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
	    <property name="dbType" value="mysql" />
	</bean>
	
	<!-- 数据源,事务管理配置文件 -->
	<!-- alibaba druid datasource -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 监控数据库 -->
		<property name="filters" value="stat" />
		
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="100" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="10" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		 <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />
		
		<property name="validationQuery" value="SELECT 1 from dual" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		
		<!-- 打开removeAbandoned功能 -->
		<!--  含义: 是否开启自动清理被租借的连接但是又没有还回线程池
			       作用: 
         		 1.租借的时候放入activeConnections
         		 2.DyestroyTask定时把没有放回连接池的连接关闭掉 
     	-->
		<property name="removeAbandoned" value="true"></property>
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="180"></property>
		<!-- 关闭abanded连接时输出错误日志 -->  
		<!-- <property name="logAbandoned" value="true" /> -->
		<property name="connectionProperties" value="druid.stat.slowSqlMillis=3000" />
		
		<!-- 配置监控统计拦截的filters -->
		<property name="proxyFilters">
	        <list>
	            <ref bean="wall-filter" />
	        </list>
    	</property>
	</bean>
	
	<!-- 多数据源配置 -->
	<!-- <bean id="multipleDataSource" class="com.yph.h5.util.datasource.MultipleDataSource">
        <property name="defaultTargetDataSource" ref="h5DataSource"/>
        <property name="targetDataSources">
            <map>
                <entry key="h5dataSource" value-ref="h5DataSource"/>
                <entry key="wxDataSource" value-ref="wxDataSource"/>
            </map>
        </property>
    </bean> -->
    
    <!-- myBatis文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:myBatisSqlMapConfig.xml"></property>
		<!-- <property name="dataSource" ref="multipleDataSource" /> -->
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 配置包的基路径即可，多个包用;分割 -->
		<property name="typeAliasesPackage" value="com.test.demo.model."/>
		<!-- 自动扫描mapping目录, 省掉Configuration.xml里的手工配置 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/test/demo/model/mapper/*Mapper.xml</value>
				<!-- <value>classpath:com/test/demo/model/mapper/*Mapper.xml</value> -->
			</list>
		</property>
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- <property name="basePackage" value="com.yph.h5.wx.mapper,com.yph.h5.wx.extend.mapper" /> -->
		<property name="basePackage" value="com.test.demo.model.mapper" />
		<!--  如果指定的某个包下并不完全是我们定义的Mapper接口，我们也可以通过自定义注解的方式指定生成MapperFactoryBean对象。 -->
		<!-- <property name="annotationClass" value="com.lydia.annotation.MyBatisRepository" />   -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	
	<!-- 事务管理器  由spring管理mybatis的事务-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
	
	<!-- 配置druid监控Spring -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor"/>

	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>com.test.demo.service*</value>
				<!-- <value>com.yph.wechat.service.intf*</value> -->
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />
	</aop:config>
	
	<!-- 事务控制 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="remove*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="doEvent*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="find*" read-only="true" />
			<!-- 搜索服务以此命名列表页之类的 -->
			<tx:method name="search*" read-only="true" />
			<!-- 提供业务操作的服务 -->
			<tx:method name="workFor*" propagation="REQUIRED" rollback-for="Exception" />
			<!-- 记录日志 -->
			<tx:method name="logFor*" propagation="NOT_SUPPORTED" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	
	<!-- 
		第一个 * —— 通配 任意返回值类型
		第二个 * —— 通配 包com.yph.omp.service.impl下的任意class
		第三个 * —— 通配 包com.yph.omp.service.impl下的任意class的任意方法    
		第四个 .. —— 通配 方法可以有0个或多个参数
		execution(* org.zhuc..*.service..*Service.*(..))"  
	-->
	<!-- <bean id="multipleDataSourceAspectAdvice" class="com.test.demo.util.datasource.MultipleDataSourceAspectAdvice"/> -->
	
	<aop:config>
		<aop:pointcut id="txPointcut" expression="(execution(* com.test.demo.service.impl.*.*(..))) or (execution(* com.yph.wechat.service.impl.*.*(..)))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 自动装配 -->
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	
	<!-- <import resource="spring-quartz.xml"/> -->
	
</beans>